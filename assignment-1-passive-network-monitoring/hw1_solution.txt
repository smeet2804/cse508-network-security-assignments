1.1 How many packets does the trace contain? 


Command: 


tcpdump -r hw1.pcap -n | wc -l


Output: 


32616




1.2 How many ARP packets and how many UDP packets?


Command:


tcpdump -r hw1.pcap arp -n | wc -l
tcpdump -r hw1.pcap udp -n | wc -l


Output:


ARP Packets: 11304
UDP Packets: 18334




1.3 How many DHCP packets?


Command:


tcpdump -r hw1.pcap -n 'udp and (port 67 or port 68)' | wc -l


Approach:


The filter expression 'udp and (port 67 or port 68)' tells tcpdump to select only UDP packets that are on port 67 (usually associated with the DHCP server) or port 68 (usually associated with the DHCP client).


Output:


256




1.4 How many packets were exchanged between 91.189.90.41 and 192.168.0.200?


Command:


tcpdump -r hw1.pcap -n "host 91.189.90.41 and host 192.168.0.200" | wc -l


Approach:


The filter expression "host 91.189.90.41 and host 192.168.0.200" tells tcpdump to only show packets that involve both the host with IP address 91.189.90.41 and the host with IP address 192.168.0.200. This means it will display packets where either of these IP addresses is the source or the destination, but only if both are involved in the communication.


Output:


14




1.5 Print the unique source IP addresses found in the trace in numerical order.


Command: 


tcpdump -n -r hw1.pcap ip | awk '{print $3}' | cut -d '.' -f1-4 | cut -d ':' -f1 | sort -V | uniq


Approach:


Extracts and processes the source IP addresses using a combination of awk, cut, sort, and uniq. Then print unique source IP addresses in numerical order, removing port numbers and any additional data beyond the fourth octet of the IP address.


Output:


0.0.0.0
1.234.31.20
46.51.197.88
46.51.197.89
62.252.170.81
62.252.170.91
87.98.246.8
87.230.23.162
91.189.88.33
91.189.89.88
91.189.90.40
91.189.90.41
91.189.91.14
91.189.91.15
91.189.92.190
92.240.68.152
122.154.101.54
130.75.16.5
159.148.96.184
169.254.56.55
192.168.0.1
192.168.0.2
192.168.0.3
192.168.0.5
192.168.0.6
192.168.0.7
192.168.0.10
192.168.0.11
192.168.0.12
192.168.0.200
194.168.4.100
216.137.63.121
216.137.63.137




1.6 Print the unique 'private network' (according to RFC1918) source IP addresses found in the trace in numerical order.


Command:


tcpdump -n -r hw1.pcap  ip 'src net 10.0.0.0/8 or 172.16.0.0/12 or 192.168.0.0/16' | awk '{print $3}' | cut -d'.' -f1-4 | sort -V | uniq


Approach:


Filter IP packets originating from private IP ranges (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16). Then use awk to extract the source IP addresses, cut to trim them to their first four octets, sort them numerically with sort -V, and finally use uniq to remove any duplicates. The result is a sorted list of unique source IP addresses from the specified private ranges.


Output:


192.168.0.1
192.168.0.2
192.168.0.3
192.168.0.5
192.168.0.6
192.168.0.7
192.168.0.10
192.168.0.11
192.168.0.12
192.168.0.200




1.7 Print the unique destination IP addresses found in the trace in numerical order.


Command:


tcpdump -n -r hw1.pcap ip | awk '{print $5}' | cut -d '.' -f1-4 | cut -d ':' -f1 | sort -V | uniq


Approach:


Filter IP packets and then process the output to extract and list unique IP addresses. The awk command extracts the fifth field, the IP addresses, from which cut commands remove port numbers and retain only the IP address parts. Finally, sort -V and uniq commands sort the addresses numerically and remove any duplicates, resulting in a list of unique IP addresses found in the packet capture file.


Output:


1.234.31.20
46.51.197.88
46.51.197.89
62.252.170.81
62.252.170.91
87.98.246.8
87.230.23.162
91.189.88.33
91.189.89.88
91.189.90.40
91.189.90.41
91.189.91.14
91.189.91.15
91.189.92.190
92.240.68.152
122.154.101.54
130.75.16.5
159.148.96.184
169.254.255.255
192.168.0.12
192.168.0.200
192.168.0.255
194.168.4.100
216.137.63.121
216.137.63.137
224.0.0.22
224.0.0.251
224.0.0.252
239.255.255.250
255.255.255.255




1.8 What are the top-5 TCP and top-5 UDP destination ports?


Command:


tcpdump -n -r hw1.pcap tcp | awk '{print $5}' | cut -d ':' -f1 | cut -d '.' -f5 | sort | uniq -c | sort -nr | head -n 5


tcpdump -n -r hw1.pcap udp | awk '{print $5}' | cut -d ':' -f1 | cut -d '.' -f5 | sort | uniq -c | sort -nr | head -n 5


Approach:


Process the fifth field of the tcpdump output, which usually contains the destination IP address and port, to isolate the last octet of the IP addresses. Then, count the unique occurrences of these last octets, sort them in descending order of frequency, and display the top 5.


Output:


Top-5 TCP ports


Count -> Port


727->80
697->54634
346->49836
61->47110
36->40341


Top-5 UDP ports


Count ->Port


13178->1900
1925->137
1516->5355
840->5353
399->138




1.9 How many TCP packets have the SYN flag set?


Command:


tcpdump -n 'tcp[tcpflags] & tcp-syn != 0' -r hw1.pcap | wc -l


Approach:


Filters for TCP packets where the SYN flag is set, indicating the initiation of a TCP connection. Pipe the output to wc -l to count the number of lines, effectively counting how many TCP SYN packets are present in the capture file. 


Output:


75


1.10 How many TCP connection attempts were made?


Command:


tcpdump -n 'tcp[tcpflags] == tcp-syn' -r hw1.pcap | wc -l


Approach:


Filter TCP packets where only the SYN flag is set (indicating the start of a TCP connection) and wc -l to count the lines of output, each representing a matching packet.


Output:


37




1.11 Towards which ports were TCP connection attempts made? How many attempts per port?


Command:


tcpdump -n -r hw1.pcap tcp | grep "\[S\]" | awk '{print $5}' | cut -d ':' -f1 | cut -d '.' -f5 | sort | uniq -c | sort -nr | head -n 5


Approach:


Filter for TCP packets with the SYN flag set (`grep "\[S\]"`), extracting the source IP addresses (awk, cut), and then sort and count the unique occurrences (sort, uniq -c, sort -nr).


Output:
     
Number of attempts -> Port
33->80
2->9100
1->465
1->443




1.12 How many HTTP GET requests were made? Print the URLs of all HTTP requests
     for JPG files.


Command:
 
tcpdump -A -n -t -r hw1.pcap ip | grep "HTTP: GET" | wc -l


tcpdump -A -n -t -r hw1.pcap ip | grep "HTTP: GET .*\.jpg" | awk -F "GET " '{print $2}' | cut -d' ' -f1


Approach:


The -A option in tcpdump is used to print each packet (minus its link level header) in ASCII. This can be helpful for understanding the contents of the packets being captured, especially when dealing with protocols that transmit text (such as HTTP). The output is then piped to grep to search for lines containing "HTTP: GET" requests specifically for .jpg files. Finally, awk is used to extract and print the specific part of each line that comes after "GET ", which typically includes the path to the requested .jpg file and the HTTP protocol version.


Output:


94


http://pic.leech.it/i/f166c/479246b0asttas.jpg
/i/f166c/479246b0asttas.jpg
http://ecx.images-amazon.com/images/I/41oZ1XsiOAL._SL500_AA300_.jpg
http://www.nature.com/news/2009/090527/images/459492a-i1.0.jpg
/news/2009/090527/images/459492a-i1.0.jpg




1.13 When (date and time) was the first and last packet of the trace sent?




Command:


tcpdump -n -tttt -r hw1.pcap | head -n 1 | awk -F ' ' '{print $1 " " $2}'
tcpdump -n -tttt -r hw1.pcap | tail -n 1 | awk -F ' ' '{print $1 " " $2}'


Approach:


-tttt is used to print the timestamps in a human-readable format. The output is then piped to awk, which is used to format and print only the date and time fields of the first and last packets, respectively.


Output:


First packet send date: 2013-01-12 11:37:42.871346
Last packet send date: 2013-01-14 13:27:03.691498




1.14 What is the brand of the device that sent most of the packets? What is its
     IP address?


Command:


tcpdump -enr hw1.pcap | awk '{print $2}' | sort | uniq -c | sort -nr | head -n 1


tcpdump -n 'ether src c4:3d:c7:17:6f:9b and arp and arp[6:2] = 1' -r hw1.pcap -r hw1.pcap | awk '{print $7}' | cut -d',' -f1 | sort | uniq


Approach:


Extract the second field, MAC addresses, using awk, then sort, count unique occurrences, sort them in reverse order based on count, and display the most frequent occurrence. 


Select packets where the source Ethernet (MAC) address is c4:3d:c7:17:6f:9b and its arp request, get the first matching packet, then extract the seventh field of the output using awk, the IP in a packet capture.


Output:


Mac Address: c4:3d:c7:17:6f:9b 
Device: NETGEAR 
IP Address: 192.168.0.1






1.15 Report the distribution of Ethernet packet sizes (how many packets of size X exist in the trace, for all values of X in the trace), numerically sorted by packet size.


Command:


tcpdump -n -e -r hw1.pcap | grep "length" | awk -F "length " '{print$2}' | cut -d':' -f1 | sort -n | uniq -c | awk '{print $2 "->" $1}'


Approach:


Filters for lines containing "length", extracts the packet lengths, sorts them numerically, and then counts each unique length. Format the output to show the length of each packet length followed by the count itself, using the "->" separator.




Output:


Packet size -> No of occurences
42->24
54->1
60->12190
62->13
63->232
64->887
65->4
66->1046
68->8
69->6
70->3
72->1
74->87
75->8
76->6
77->2
79->4
81->54
82->4
84->43
85->4
87->14
88->5
89->4
90->13
91->341
92->1740
93->2
94->2
95->2
105->2
106->4
107->10
110->180
111->2
119->28
120->121
124->4
125->7
127->15
129->2
142->11
144->1
149->7
154->10
156->1
165->60
167->62
168->12
170->4
171->1
175->146
177->4
178->1
184->2
195->1
202->17
207->1
208->2
219->39
220->2
223->1
229->2
231->36
233->3
236->2
243->279
244->4
245->16
246->22
247->3
248->9
249->56
252->2
254->4
255->2
257->2
261->2
264->6
265->2
266->2
267->4
268->2
269->3
282->6
284->9
288->2
294->2
298->3
302->15
305->2
306->1
307->12
308->1
309->2
310->2
312->1
315->24
317->1
318->86
320->1
321->2
322->4
326->85
328->7
329->5
330->10
331->2773
332->10
333->6
335->1
338->88
340->2749
342->326
344->3
345->4
346->4
347->1
350->6
362->86
372->1
374->1
383->2
386->88
389->1
390->87
392->87
394->86
395->2759
396->1
398->85
405->2758
412->1
417->1
418->2
428->1
429->1
432->1
433->1
446->1
460->33
475->164
476->10
478->2
479->1
482->1
484->165
485->10
489->13
497->3
502->2
506->1
518->1
527->158
528->10
535->1
539->162
540->10
541->155
542->10
544->1
546->2
548->1
550->2
551->17
552->1
555->161
556->10
568->1
588->1
590->2
592->1
593->2
596->1
598->2
601->1
602->32
607->2
608->1
610->6
611->2
612->2
613->5
614->2
615->2
621->2
624->2
628->5
630->2
636->2
640->1
666->12
678->1
679->1
690->1
694->1
698->22
704->2
730->1
746->1
752->1
760->1
816->8
817->5
926->1
952->1
979->1
1033->40
1034->6
1035->4
1102->1
1162->1
1170->1
1179->1
1212->2
1218->1
1469->1
1514->1034